name: Build Client Desktop Packages (Reusable)

on:
  workflow_call:
    inputs:
      client:
        description: 'Client to build'
        required: true
        type: string
      version:
        description: 'Client version'
        required: true
        type: string
      platforms:
        description: 'Platforms to build (all, windows, macos, linux)'
        required: false
        type: string
        default: 'all'

jobs:
  build:
    name: Build for ${{ matrix.platform_name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: mac
            platform_name: macOS
            build_command: 'npm run electron:build:mac'
            artifact_pattern: 'dist-desktop/*.zip'
          - os: windows-latest
            platform: win
            platform_name: Windows
            build_command: 'npm run electron:build:win'
            artifact_pattern: 'dist-desktop/*.exe'
          - os: ubuntu-latest
            platform: linux
            platform_name: Linux
            build_command: 'npm run electron:build:linux'
            artifact_pattern: 'dist-desktop/*.AppImage'

    steps:
      - name: Checkout client branch
        uses: actions/checkout@v4
        with:
          ref: client/${{ inputs.client }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Quick diagnostics
        run: |
          echo "=== Quick diagnostics ==="
          echo "== engines in package.json =="
          cat package.json | grep -A4 '"engines"' || echo "No engines field found"
          echo ""
          echo "== Node/npm versions =="
          node --version || true
          npm --version || true

      - name: Pre-validate version fields (fail-fast)
        id: validate-versions
        continue-on-error: true
        shell: bash
        run: |
          echo "Installing semver helper (no-save)..."
          # Attempt lightweight install of semver for validation. If install fails, continue so we still try npm ci and capture logs.
          npm i semver@7 --no-save --no-audit --no-fund || true
          node - <<'NODE'
          const fs = require('fs');
          let semver;
          try { semver = require('semver'); } catch (e) { console.error('semver not available - skipping strict validation, will rely on npm error logs.'); process.exit(0); }
          function findInvalidVersions(path) {
            if (!fs.existsSync(path)) return [];
            const obj = JSON.parse(fs.readFileSync(path, 'utf8'));
            const bad = [];
            (function rec(o, p) {
              if (!o || typeof o !== 'object') return;
              for (const k of Object.keys(o)) {
                if (k === 'version' && o[k] !== undefined) {
                  const v = String(o[k]);
                  if (!semver.valid(v)) bad.push(`${p || path} -> ${v}`);
                } else {
                  rec(o[k], p ? `${p}.${k}` : k);
                }
              }
            })(obj, '');
            return bad;
          }
          const invalid = [...findInvalidVersions('package.json'), ...findInvalidVersions('package-lock.json'), ...findInvalidVersions('desktop/package.json'), ...findInvalidVersions('desktop/package-lock.json')];
          if (invalid.length) {
            console.error('Invalid version strings detected:');
            invalid.forEach(i => console.error(' - ' + i));
            process.exit(2);
          } else {
            console.log('Version fields look valid (semver check passed).');
          }
          NODE

      - name: Install root dependencies
        id: npm-ci
        continue-on-error: true
        run: npm ci

      - name: List candidate npm log files (always)
        if: always()
        shell: bash
        run: |
          echo "=== Listing candidate npm debug log dirs ==="
          for d in "$HOME/.npm/_logs" "$RUNNER_TEMP/npm-cache/_logs" "$HOME/.npm/_logs" /c/npm/cache/_logs /c/Users/*/AppData/Roaming/npm-cache/_logs /c/Users/*/AppData/Local/npm-cache/_logs; do
            echo "DIR: $d"
            ls -lah "$d" 2>/dev/null || echo "  (not found or inaccessible)"
          done

      - name: Upload npm debug log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: npm-debug-log-${{ matrix.platform }}
          path: |
            ~/.npm/_logs/*.log
            $RUNNER_TEMP/npm-cache/_logs/*.log
            $HOME/.npm/_logs/*.log
            C:\npm\cache\_logs\*.log
            C:\Users\*\AppData\Roaming\npm-cache\_logs\*.log
            C:\Users\*\AppData\Local\npm-cache\_logs\*.log
          if-no-files-found: warn

      - name: Display npm debug log on failure
        if: steps.npm-ci.outcome == 'failure'
        shell: bash
        run: |
          echo "=== SEARCHING FOR NPM DEBUG LOGS ==="
          found=0
          for d in "$HOME/.npm/_logs" "$RUNNER_TEMP/npm-cache/_logs" "$HOME/.npm/_logs" /c/npm/cache/_logs /c/Users/*/AppData/Roaming/npm-cache/_logs /c/Users/*/AppData/Local/npm-cache/_logs; do
            if [ -d "$d" ]; then
              for log in "$d"/*.log; do
                [ -f "$log" ] || continue
                found=1
                echo "=== $log ($(wc -c < "$log" 2>/dev/null || echo 0) bytes) ==="
                size=$(wc -c < "$log" 2>/dev/null || echo 0)
                if [ "$size" -gt 5242880 ]; then
                  echo "Log is large ($size bytes) â€” showing first/last 500 lines"
                  head -n 500 "$log" || true
                  echo "..."
                  tail -n 500 "$log" || true
                else
                  cat "$log" || true
                fi
              done
            fi
          done
          if [ "$found" -eq 0 ]; then
            echo "No npm debug logs found in common locations."
          fi
          # Fail the step so the job shows failure after printing logs
          exit 1

      - name: Dump npm debug log on failure (Windows PowerShell)
        if: steps.npm-ci.outcome == 'failure'
        shell: pwsh
        run: |
          Write-Host "=== Searching for npm debug logs (PowerShell) ==="
          $candidates = @(
            'C:\npm\cache\_logs',
            (if ($env:APPDATA) { Join-Path $env:APPDATA 'npm-cache\_logs' } else { $null }),
            (if ($env:USERPROFILE) { Join-Path $env:USERPROFILE 'AppData\Roaming\npm-cache\_logs' } else { $null })
          ) | Where-Object { $_ }
          $found = $false
          foreach ($d in $candidates) {
            if (Test-Path $d) {
              Get-ChildItem -Path $d -Filter '*.log' -ErrorAction SilentlyContinue | ForEach-Object {
                $found = $true
                Write-Host "=== Showing $($_.FullName) ($((Get-Item $_.FullName).Length) bytes) ==="
                $size = (Get-Item $_.FullName).Length
                if ($size -gt 5MB) {
                  Get-Content $_.FullName -TotalCount 500
                  Write-Host '...'
                  Get-Content $_.FullName | Select-Object -Last 500
                } else {
                  Get-Content $_.FullName -Raw
                }
              }
            }
          }
          if (-not $found) { Write-Host 'No Windows npm debug logs found in candidate locations.'; exit 1 }
          exit 1

      - name: Install desktop dependencies
        run: |
          cd desktop
          npm ci
          cd ..

      - name: Validate client configuration
        run: |
          chmod +x scripts/validate-client-config.sh
          ./scripts/validate-client-config.sh ${{ inputs.client }}

      - name: Select client configuration
        run: |
          chmod +x scripts/select-client-config.sh
          ./scripts/select-client-config.sh ${{ inputs.client }}

      - name: Update desktop metadata
        run: |
          chmod +x scripts/update-desktop-metadata.sh
          ./scripts/update-desktop-metadata.sh ${{ inputs.client }}

      - name: Build web application
        run: npm run build

      - name: Build desktop app
        if: inputs.platforms == 'all' || inputs.platforms == matrix.platform || (inputs.platforms == 'macos' && matrix.platform == 'mac')
        run: ${{ matrix.build_command }}

      - name: Upload artifacts
        if: inputs.platforms == 'all' || inputs.platforms == matrix.platform || (inputs.platforms == 'macos' && matrix.platform == 'mac')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.client }}-${{ matrix.platform }}-v${{ inputs.version }}
          path: ${{ matrix.artifact_pattern }}
          retention-days: 30
          if-no-files-found: error
